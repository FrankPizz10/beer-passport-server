generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model beers {
  id               Int                @id @default(autoincrement())
  brewery_id       Int                @default(0)
  name             String             @default("") @db.VarChar(255)
  cat_id           Int                @default(0)
  style_id         Int                @default(0)
  abv              Float              @default(0) @db.Float
  ibu              Float              @default(0) @db.Float
  srm              Float              @default(0) @db.Float
  upc              Int                @default(0)
  filepath         String             @default("") @db.VarChar(255)
  descript         String             @db.Text
  add_user         Int                @default(0)
  last_mod         DateTime           @default(now()) @db.Timestamp(0)
  brewery          breweries          @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_beers_brewery_id")
  category         categories         @relation(fields: [cat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_beers_cat_id")
  style            styles             @relation(fields: [style_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_beers_style_id")
  collection_beers collection_beers[]
  user_beers       user_beers[]

  @@index([brewery_id], map: "fk_beers_brewery_id")
  @@index([cat_id], map: "fk_beers_cat_id")
  @@index([style_id], map: "fk_beers_style_id")
}

model breweries {
  id       Int      @id @default(autoincrement())
  name     String   @default("") @db.VarChar(255)
  address1 String   @default("") @db.VarChar(255)
  address2 String   @default("") @db.VarChar(255)
  city     String   @default("") @db.VarChar(255)
  state    String   @default("") @db.VarChar(255)
  code     String   @default("") @db.VarChar(25)
  country  String   @default("") @db.VarChar(255)
  phone    String   @default("") @db.VarChar(50)
  website  String   @default("") @db.VarChar(255)
  filepath String   @default("") @db.VarChar(255)
  descript String   @db.Text
  add_user Int      @default(0)
  last_mod DateTime @default(now()) @db.Timestamp(0)
  beers    beers[]
}

model breweries_geocode {
  id         Int    @id @default(autoincrement())
  brewery_id Int    @default(0)
  latitude   Float  @default(0) @db.Float
  longitude  Float  @default(0) @db.Float
  accuracy   String @default("") @db.VarChar(255)
}

model categories {
  id       Int      @id @default(autoincrement())
  cat_name String   @default("") @db.VarChar(255)
  last_mod DateTime @default(now()) @db.Timestamp(0)
  beers    beers[]
}

model styles {
  id         Int      @id @default(autoincrement())
  cat_id     Int      @default(0)
  style_name String   @default("") @db.VarChar(255)
  last_mod   DateTime @default(now()) @db.Timestamp(0)
  beers      beers[]
}

model user_beers {
  id         Int       @id @default(autoincrement())
  user_id    Int
  beer_id    Int
  liked      Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  beers      beers     @relation(fields: [beer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_beers_beer_id")
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_beers_user_id")

  @@unique([user_id, beer_id])
  @@index([beer_id], map: "fk_user_beers_beer_id")
  @@index([user_id], map: "fk_user_beers_user_id")
}

model users {
  id                            Int           @id @unique(map: "id") @default(autoincrement())
  uid                           String        @unique(map: "uid") @db.VarChar(255)
  age                           Int
  email                         String        @unique(map: "email") @db.VarChar(255)
  user_name                     String        @unique(map: "user_name") @db.VarChar(255)
  private                       Boolean       @default(false)
  friends_friends_user_1Tousers friends[]     @relation("friends_user_1Tousers")
  friends_friends_user_2Tousers friends[]     @relation("friends_user_2Tousers")
  user_badges                   user_badges[]
  user_beers                    user_beers[]
}

model collections {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  difficulty       Int
  description      String             @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  collection_beers collection_beers[]
  user_badges      user_badges[]
}

model user_badges {
  id            Int         @id @default(autoincrement())
  user_id       Int
  collection_id Int
  earned        Boolean     @default(false)
  progress      Float       @default(0) @db.Float
  created_at    DateTime    @default(now()) @db.Timestamp(0)
  updated_at    DateTime    @default(now()) @db.Timestamp(0)
  collections   collections @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_badges_collection_id")
  users         users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_badges_user_id")

  @@unique([user_id, collection_id], map: "user_id_collection_id")
  @@index([collection_id], map: "fk_user_badges_collection_id")
}

model collection_beers {
  id            Int         @id @default(autoincrement())
  collection_id Int
  beer_id       Int
  created_at    DateTime?   @default(now()) @db.Timestamp(0)
  updated_at    DateTime?   @default(now()) @db.Timestamp(0)
  beers         beers       @relation(fields: [beer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_beer_id")
  collections   collections @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_collection_id")

  @@unique([collection_id, beer_id], map: "collection_id_beer_id")
  @@index([beer_id], map: "fk_beer_id")
}

model friends {
  id                          Int      @id @default(autoincrement())
  user_1                      Int
  user_2                      Int
  created_at                  DateTime @default(now()) @db.Timestamp(0)
  updated_at                  DateTime @default(now()) @db.Timestamp(0)
  users_friends_user_1Tousers users    @relation("friends_user_1Tousers", fields: [user_1], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "friends_ibfk_1")
  users_friends_user_2Tousers users    @relation("friends_user_2Tousers", fields: [user_2], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "friends_ibfk_2")

  @@unique([user_1, user_2], map: "unique_user_combination")
  @@index([user_2], map: "user_2")
}
